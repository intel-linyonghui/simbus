

%{
# include  <map>
# include  <iostream>
# include  <sstream>
# include  "priv.h"

using namespace std;

static int error_count = 0;
extern "C" int configlex(void);
static void yyerror(const char*msg);

static string use_name;

static unsigned use_bus_port;
static string use_bus_pipe;
static string use_bus_protocol;
static bus_device_map_t use_bus_devices;
static map<string,string> use_bus_options;

static string use_proc_exec;
static string use_proc_stdin;
static string use_proc_stdout;
static string use_proc_stderr;
static map<string,string> use_proc_env;

static void start_new_bus(void)
{
      use_bus_port = 0;
      use_bus_pipe = "";
      use_name = "";
      use_bus_protocol = "";
      use_bus_devices.clear();
      use_bus_options.clear();
}

static void add_bus_option(char*key, char*value)
{
	use_bus_options[key] = value;
	free(key);
	free(value);
}

static void add_bus_option(char*key, unsigned value)
{
	char val_buf[64];
	snprintf(val_buf, sizeof val_buf, "%u", value);
	use_bus_options[key] = val_buf;
	free(key);
}

static void add_device_to_bus(unsigned devid, char*devname, bool host_flag)
{
      string tmp_name (devname);
      struct bus_device_plug tmp;
      tmp.host_flag = host_flag;
      tmp.ident = devid;
      tmp.ready_flag = false;
      use_bus_devices[tmp_name] = tmp;
      free(devname);
}

static void wrap_up_new_bus(void)
{
      ostringstream bus_key;

      if (use_bus_pipe.size() == 0) {
	    bus_key << "tcp:"  << use_bus_port;
      } else {
	    bus_key << "pipe:" << use_bus_pipe;
      }

      service_add_bus(bus_key.str(), use_name,
		      use_bus_protocol, use_bus_devices, use_bus_options);
}

static void start_new_process(void)
{
	use_name = "";
	use_proc_exec = "";
	use_proc_stdin = "/dev/null";
	use_proc_stdout = "/dev/null";
	use_proc_stderr = "";
	use_proc_env.clear();
}

static void wrap_up_new_process(void)
{
	process_add(use_name, use_proc_exec, use_proc_stdin,
	            use_proc_stdout, use_proc_stderr, use_proc_env);
}

%}

%union {
      unsigned integer;
      char*    text;
}

%token K_bus K_device K_env K_exec K_host K_name
%token K_pipe K_port K_process K_protocol K_stderr K_stdin K_stdout
%token <integer> INTEGER
%token <text>    STRING IDENTIFIER

%%

config_file
  : config_file config_item
  | config_item
  ;

config_item : bus | process ;

bus
  : K_bus
      { start_new_bus(); }
    '{' bus_item_list '}'
      { wrap_up_new_bus(); }
  ;

bus_item_list
  : bus_item_list bus_item
  | bus_item
  ;

bus_item
  : K_port   '=' INTEGER ';'    { use_bus_port = $3; }
  | K_pipe   '=' STRING ';'     { use_bus_pipe = string($3); free($3); }
  | K_name   '=' STRING ';'     { use_name = string($3); free($3); }
  | K_protocol '=' STRING ';'   { use_bus_protocol = string($3); free($3); }
  | K_device INTEGER STRING ';' { add_device_to_bus($2, $3, false); }
  | K_host   INTEGER STRING ';' { add_device_to_bus($2, $3, true); }
  | IDENTIFIER '=' STRING ';'   { add_bus_option($1, $3); }
  | IDENTIFIER '=' INTEGER ';'   { add_bus_option($1, $3); }
  | error ';' { fprintf(stderr, "%d: Invalid bus item\n", @1.first_line);
                error_count += 1; }
  ;

process
  : K_process
      { start_new_process(); }
    '{' process_item_list '}'
      { wrap_up_new_process(); }
  ;

process_item_list
  : process_item_list process_item
  | process_item
  ;

process_item
  : K_name   '=' STRING ';'      { use_name = string($3); free($3); }
  | K_exec   '=' STRING ';'      { use_proc_exec = string($3); free($3); }
  | K_stdin  '=' STRING ';'      { use_proc_stdin  = string($3); free($3); }
  | K_stdout '=' STRING ';'      { use_proc_stdout = string($3); free($3); }
  | K_stderr '=' STRING ';'      { use_proc_stderr = string($3); free($3); }
  | K_env STRING '=' STRING ';'  { use_proc_env[string($2)] = string($4);
                                   free($2); free($4); }
  | error '=' STRING ';' { fprintf(stderr, "%d: Invalid keyword in process assignment\n", @3.first_line);
                error_count += 1; }
  | error ';' { fprintf(stderr, "%d: Invalid process item\n", @1.first_line);
                error_count += 1; }
  ;

%%

static void yyerror(const char*txt)
{
	cerr << txt << endl;
}

extern "C" void configrestart(FILE*fd);

int config_file(FILE*cfg)
{
	error_count = 0;
	configrestart(cfg);
	int rc = yyparse();
	if (rc != 0)
	    return -1;
	if (error_count > 0)
	    return -1;
	return 0;
}
