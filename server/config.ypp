

%{
# include  <map>
# include  <iostream>
# include  "priv.h"

using namespace std;

extern "C" int configlex(void);
static void yyerror(const char*msg);

static unsigned use_bus_port;
static string use_bus_name;
static bus_device_map_t use_bus_devices;

static void start_new_bus(void)
{
      use_bus_port = 0;
      use_bus_name = "";
      use_bus_devices.clear();
}

static void add_device_to_bus(unsigned devid, char*devname)
{
      string tmp_name (devname);
      struct bus_device_plug tmp;
      tmp.ident = devid;
      tmp.ready_flag = false;
      use_bus_devices[tmp_name] = tmp;
      free(devname);
}

static void wrap_up_new_bus(void)
{
      service_add_bus(use_bus_port, use_bus_name, use_bus_devices);
}

%}

%union {
      unsigned integer;
      char*    text;
}

%token K_bus K_device K_name K_port
%token <integer> INTEGER
%token <text>    STRING

%%

config_file
  : config_file config_item
  | config_item
  ;

config_item : bus ;

bus
  : K_bus
      { start_new_bus(); }
    '{' bus_item_list '}'
      { wrap_up_new_bus(); }
  ;

bus_item_list
  : bus_item_list bus_item
  | bus_item
  ;

bus_item
  : K_port   '=' INTEGER ';'    { use_bus_port = $3; }
  | K_name   '=' STRING ';'     { use_bus_name = string($3); free($3); }
  | K_device INTEGER STRING ';' { add_device_to_bus($2, $3); }
  ;

%%

static void yyerror(const char*txt)
{
	cerr << txt << endl;
}

extern "C" void configrestart(FILE*fd);

int config_file(FILE*cfg)
{
	configrestart(cfg);
	int rc = yyparse();
	if (rc != 0)
	return -1;
}
