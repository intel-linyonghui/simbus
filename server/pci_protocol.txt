
PCI bus simulations have these signals:


              Name       host     device
              ----       ----     ------
Misc.
              PCI_CLK     I         I
              RESET#      O         I
	      IDSEL       I         I    (See "IDSEL mapping")
	      INTA#       I*        O    (See "INTx# mapping")
	      INTB#       I*        O    (        "          )
	      INTC#       I*        O    (        "          )
	      INTD#       I*        O    (        "          )
Arbitration
              REQ#        O         O
	      GNT#        I         I
Control
	      FRAME#      B	    B
	      REQ64#      B	    B
	      IRDY#	  B	    B
	      TRDY#	  B	    B
	      STOP#	  B	    B
	      DEVSEL#	  B	    B
	      ACK64#	  B	    B
Address/Data
	      AD	  B         B
	      C/BE#	  B	    B
	      PAR	  B	    B
	      PAR64	  B	    B

A bus has these options:

              Name
              bus_speed   33 | 66      (default 33)
	      bus_park    none | last  (default none)
	      gnt_linger  <N>          (default 16)

* The PCI Clock

This is entirely under the control of the server. The server generates
the clock and 4 phase points where the bus device can receive/report
signals. The server uses "UNTIL" messages to advance through the
phases of the PCI clock. The "UNTIL" message starts the phase and
includes the signal values that the client should use within that
phase. Clients should assume that those signal values were valid at
least dT before the phase starts. This is most pertinent for phase-A,
clock posedge. This sketch shows the phases:

                   C        D A B        C
                   |        | | |        |
                   V        V V V        V
        +----------+          +----------+
        |          |          |          |
        |          |          |          |
   -----+          +----------+          +----------

  A  - The posedge of the clock. At this point, since the bus is
       synchronous, all the signals should be stable and can be
       tested. The values that the client receives from the server to
       start this phase were reported at the beginning of phase-D, or
       earlier. This phase is 2ns wide.

  B  - Signal hold. This is a chance for clients to change signals in
       response to the posedge of the clock. This phase is 13ns.

  C  - The negedge of the clock. Another chance to change
       signals. This phase is 13ns.

  D  - Signal Setup. This is the last chance for clients to change
       signal values for the upcoming posedge. Signal values in the
       "READY" message will arrive at other clients with the start of
       phase-A. This phase is 2ns.

The clock can also be configured for 66MHz operation. Set the option
"bus_speed=66" to enable a 66MHz clock.

* IDSEL mapping

On a PCI bus, the device number is used to select the IDSEL signal
that is routed to it. The bus supports 16 directly-connected devices
(including hosts) and the device number may be a value from 0-15
inclusive. The IDSEL signal is generated from the AD bus, with IDSEL
for device-0 connected to AD[16], IDSEL for device-1 to AD[17], and so
on up to device-15 to AD[31]. Hosts and devices are treated equally by
the server. The IDSEL mapping is done by the server, so any bus master
(device or host) can generate configuration cycles with the desired
IDSEL bits set.

* INTx# mapping

Devices (not hosts) have 4 interrupt outputs, INTA#, INTB#, INTC# and
INTD#. These are used as expected.

Hosts, on the other hand, only have interrupt *inputs*. The host sees
the signals INTA#, INTB#, INTC# and INTD# for as 16bit vectors, with
each bit position of the vector representing the interrupt for the
corresponding device. Thus the host sees and can differentiate all the
interrupts from all the devices. If the host simulation wants to
simulate shared interrupts, it does so internally.

The INTx# interrupts for a device are allocated to a bit in the INTx#
vector by the device number. For example, device 0 drives INTA#[0],
device 1 drives INTA#[1], and so forth.

* Arbitration

The server contains the arbitor, so the host is treated like any other
device with its own REQ# and GNT# signals.

The arbiter can park the grant, if so configured. The default is not
to park GNT# signals (option bus_park = "none"). The bus can be
configured to leave the GNT# parked at the last granted master by
setting bus_park to "last" (option bus_park = "last").

When the bus is not parked, the arbiter can still be configured to
leave the GNT# parked for a randon short time by setting the
gnt_linger value to >0. If the gnt_linger=0, this feature is turned
off. If gnt_linger=<N> (and bus_park != "last") then the arbiter will
leave the GNT# parked at the last granted master for a randon time
chosed from the Poisson distribution with the number of clocks of
linger being Poiss(1/<N>). In other words, the larger <N>, the longer
the mean linger.

* Address/Data

The PCI protocol supports 64bit busses. The AD vector is 64bits and
the C/BE# vector is 8 bits always.  If a device is only being a 32bit
device, then it will send Z bits in the high 32 of the AD vector and
the high 4 bits of C/BE#. This keeps the protocol handling uniform.
